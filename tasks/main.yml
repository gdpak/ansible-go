---
- name: Discover the latest version
  shell:
    curl https://api.github.com/repos/golang/go/git/refs/tags/ | egrep 'ref.*refs/tags/go([0-9.]+)",' | egrep -o "[0-9.]+" | sort | tail -n 1
  register: latest_release
  changed_when: False
  when:
    - go_tarball is not defined
    - go_tarball_checksum is not defined
    - go_download_location is not defined

- name: Setting facts for autodiscovered version
  set_fact:
    go_version: "{{ latest_release.stdout_lines[0] }}"
    go_tarball: "go{{ latest_release.stdout_lines[0] }}.linux-amd64.tar.gz"
  when: not latest_release | skipped

- name: Setting facts based on previous autodiscovered facts
  set_fact:
    go_tarball_checksum: "sha256:{{ lookup('url',go_download_buckets_url+go_tarball+'.sha256') }}"
    go_download_location: "{{ go_download_buckets_url }}{{ go_tarball }}"
  when: not latest_release | skipped

- name: Create download dir
  file: state=directory path="{{ go_download_dir }}" mode=0755

- name: Download the Go tarball
  get_url:
    url: "{{ go_download_location }}"
    dest: "{{ go_download_dir }}"
    checksum: "{{ go_tarball_checksum }}"

- block:
  - name: Copy Go certificate
    copy:
      src: linux_signing_key.pub
      dest: /tmp/golang.pub

  - name: Install Go certificate
    command: gpg --import /tmp/golang.pub

  - name: Download signature
    get_url:
      url: "{{ go_download_buckets_url }}{{ go_tarball }}.asc"
      dest: "{{ go_download_dir }}"

  - name: Verify the signature
    shell: gpg --verify "{{ go_tarball }}.asc" "{{ go_tarball }}"
    args:
      chdir: "{{ go_download_dir }}"
  when: go_check_signature

- name: Register the current Go version (if any)
  command: /usr/local/go/bin/go version
  ignore_errors: yes
  register: current_go_version
  changed_when: false

- name: Remove old installation of Go
  file:
    path: /usr/local/go
    state: absent
  when: current_go_version|failed or current_go_version.stdout != go_version_target

- name: Extract the Go tarball if Go is not yet installed or not the desired version
  unarchive:
    src: "{{ go_download_dir }}/{{ go_tarball }}"
    dest: /usr/local
    copy: no
  when: current_go_version|failed or current_go_version.stdout != go_version_target

- name: Add the Go bin directory to the PATH environment variable for all users
  copy:
    src: go-bin.sh
    dest: /etc/profile.d

- name: Set GOPATH for all users
  copy:
    src: go-path.sh
    dest: /etc/profile.d
  when: set_go_path
